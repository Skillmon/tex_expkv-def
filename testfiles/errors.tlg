This is a generated file for the l3build validation system.
Don't change this file in any respect.
============================================================
TEST 1: invalid choice
============================================================
Runaway argument?
! expkv-def Error: invalid choice `5' for `foo' in set `test'
! Paragraph ended before \<an-expandable-macro>
completed due to above exception.  If the error
summary is  not comprehensible  see the package
documentation.
I will try to recover now.  If you're in inter-
active mode hit <return>  at the ? prompt and I
continue hoping recovery was complete.
<to be read again> 
                   \par 
l. ...\TESTEXP{invalid choice}{\usekeys{foo=5}}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
============================================================
============================================================
TEST 2: invalid definitions
============================================================
! expkv-def Error: Missing definition for key `code key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
This error message was generated by an \errmessage
command, so I can't give any explicit help.
Pretend that you're Hercule Poirot: Examine all clues,
and deduce the truth by order and method.
! expkv-def Error: Missing definition for key `noval key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Undefined key `key' found while processing `default key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `default foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Undefined key `key' found while processing `initial key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Undefined noval key `foo' found while processing `initial foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `bool key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `store key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `data key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `int key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `dimen key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `skip key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `toks key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `box key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `meta key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! Illegal parameter number in definition of \ekvd@tmp.
<to be read again> 
                   1
l. ...  }
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.
! expkv-def Error: Missing definition for key `smeta key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `smeta key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `smeta key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! Illegal parameter number in definition of \ekvd@tmp.
<to be read again> 
                   1
l. ...  }
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.
! expkv-def Error: Missing definition for key `choice key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing type prefix for key `key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing type prefix for key `long key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing type prefix for key `protected key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing type prefix for key `long protected key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Undefined prefix `undefined' found while processing `undefined key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `boolpair key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: Missing definition for key `boolpair key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
============================================================
============================================================
TEST 3: invalid prefixes
============================================================
! expkv-def Error: prefix `long' not accepted in `long noval foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `long' not accepted in `long default foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `new' not accepted in `new default foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `long' not accepted in `long initial foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
Runaway argument?
! expkv-def Error: invalid choice `' for `foo' in set `test'
! Paragraph ended before \<an-expandable-macro>
completed due to above exception.  If the error
summary is  not comprehensible  see the package
documentation.
I will try to recover now.  If you're in inter-
active mode hit <return>  at the ? prompt and I
continue hoping recovery was complete.
<to be read again> 
                   \par 
l. ...  }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! expkv-def Error: prefix `protected' not accepted in `protected initial foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
Runaway argument?
! expkv-def Error: invalid choice `' for `foo' in set `test'
! Paragraph ended before \<an-expandable-macro>
completed due to above exception.  If the error
summary is  not comprehensible  see the package
documentation.
I will try to recover now.  If you're in inter-
active mode hit <return>  at the ? prompt and I
continue hoping recovery was complete.
<to be read again> 
                   \par 
l. ...  }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! expkv-def Error: prefix `long' not accepted in `long protected initial foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `protected' not accepted in `long protected initial foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
Runaway argument?
! expkv-def Error: invalid choice `' for `foo' in set `test'
! Paragraph ended before \<an-expandable-macro>
completed due to above exception.  If the error
summary is  not comprehensible  see the package
documentation.
I will try to recover now.  If you're in inter-
active mode hit <return>  at the ? prompt and I
continue hoping recovery was complete.
<to be read again> 
                   \par 
l. ...  }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! expkv-def Error: prefix `new' not accepted in `new initial foo'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
Runaway argument?
! expkv-def Error: invalid choice `' for `foo' in set `test'
! Paragraph ended before \<an-expandable-macro>
completed due to above exception.  If the error
summary is  not comprehensible  see the package
documentation.
I will try to recover now.  If you're in inter-
active mode hit <return>  at the ? prompt and I
continue hoping recovery was complete.
<to be read again> 
                   \par 
l. ...  }
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.
! expkv-def Error: prefix `long' not accepted in `long bool key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `long' not accepted in `long nmeta key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `long' not accepted in `long snmeta key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `long' not accepted in `long set key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `protected' not accepted in `protected set key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `long' not accepted in `long protected set key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `protected' not accepted in `long protected set key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `long' not accepted in `long choice key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `long' not accepted in `long boolpair key'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
============================================================
============================================================
TEST 4: invalid choice prefixes
============================================================
! expkv-def Error: prefix `long' not accepted in `choice key: long a'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `new' not accepted in `choice key: new b'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
! expkv-def Error: prefix `also' not accepted in `choice key: also c'.
\ekvd@errm #1->\errmessage {expkv-def Error: #1}
l. ...  }
(That was another \errmessage.)
============================================================
